// Generated by CoffeeScript 1.9.0
(function() {
  var addCourseBycourseCode, addNotifications, circleProgressBar, date, dateSelectWidget, downLoadAllCourses, formatNetResource, getCourseContent_getGlobalNotices, getCourseContent_showData, getCurrentDay, getDayDiff, getNetResource, getWeek, initBasePage, initBaseView, initColumnData, initPage, is_open, iterator, listViewMaker, offset, onItemClick, onItemInnerClick, onPageSelected, onResume, page_name, updateAllCourses, updateCourseByCourseCode, updateState, viewControl, _cfg, _fav_id_arr, _global_data, _listview_data, _local_data, _pagerwidget_data, _platform, _progressBarInnerNum, _theme,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _pagerwidget_data = {
    pagerCount: 200,
    offset: 1,
    itemPageName: "page_home_pager"
  };

  page_name = "page_home_pager";

  _platform = "";

  is_open = false;

  offset = 0;

  date = "";

  _progressBarInnerNum = "0";

  _theme = "default";

  _local_data = {
    index: [],
    data: {}
  };

  _fav_id_arr = {};

  _listview_data = {
    todo_count: 0,
    done_count: 0,
    pullable: false,
    hasFooterDivider: true,
    hasHeaderDivider: false,
    hasFloatButton: false,
    hasFixedTitle: false,
    dividerHeight: 0,
    dividerColor: "#cccccc",
    data: []
  };

  _cfg = {
    src_prefix: "webview/images/icon/" + _theme + "/",
    list_sort: ["process", "set_course", "remind", "todo", "survey", "article"],
    list_page_name: {
      "set_course": {
        page_name: "page_course_choose"
      },
      "set_time": {
        page_name: "page_course_time_choose"
      },
      "todo": {
        page_name: "page_course_todo"
      },
      "title": {
        page_name: "page_course_time_choose"
      },
      "survey": {
        page_name: "page_course_survey"
      },
      "article_list": {
        page_name: "page_course_article_detail"
      }
    },
    list_config: {
      7: {
        name: "remind"
      },
      6: {
        name: "tips"
      },
      5: {
        name: "survey"
      },
      4: {
        name: "todo"
      },
      2: {
        name: "article"
      }
    },
    _centerTitleColor: {
      _clickable: false,
      pressed: "#1a1a1a",
      selected: "#1a1a1a",
      normal: "#1a1a1a"
    },
    _centerTitleColorDone: {
      _clickable: false,
      pressed: "#999999",
      selected: "#999999",
      normal: "#999999"
    },
    _centerBottomdesColor: {
      _clickable: false,
      pressed: "#999999",
      selected: "#999999",
      normal: "#999999"
    },
    _centerBottomdes2Color: {
      _clickable: false,
      pressed: "#4D4D4D",
      selected: "#4D4D4D",
      normal: "#4D4D4D"
    },
    _centerBottomdesColor_article_list: {
      _clickable: false,
      pressed: "#5793ff",
      selected: "#5793ff",
      normal: "#5793ff"
    },
    _bottomDivider: {
      imageType: "assets",
      imageSize: "fitSize",
      imageSrc: "webview/images/icon/default/divider.png"
    },
    listview_right_img: "webview/images/icon/" + _theme + "/listview_right.png",
    listview_right_down_img: "webview/images/icon/" + _theme + "/listview_right_down.png"
  };

  circleProgressBar = {
    _backgroundColor: {
      _clickable: true,
      pressed: "#ffffff",
      selected: "#ffffff",
      normal: "#ffffff",
      alpha: 38
    },
    eventType: "process",
    viewType: "ListViewCellICircleProgressBar",
    progressBarInnerNumPre: "" + _progressBarInnerNum,
    progressBarInnerNum: "" + _progressBarInnerNum,
    progressBarInnerText: "读取中...",
    rightText: "",
    imageLeftBtn: {
      imageType: "assets",
      imageSize: "fitSize",
      imageSrc: _cfg.src_prefix + "arrows_left.png"
    },
    imageRightBtn: {
      imageType: "assets",
      imageSize: "fitSize",
      imageSrc: _cfg.src_prefix + "arrows_right.png"
    },
    rightText_notice_show: false,
    rightText_notice: {
      imageType: "assets",
      imageSize: "fitSize",
      imageSrc: _cfg.src_prefix + "warning.png"
    },
    _bottomDivider: _cfg._bottomDivider
  };

  _global_data = {};

  initBasePage = function() {
    $A().app().platform().then(function(platform) {
      return _platform = platform;
    });
    $A().page().onPageSelected(onPageSelected);
    $A().page().onResume(onResume);
    $A().page().widget(page_name + "_ListViewBase_0").onItemInnerClick(onItemInnerClick);
    $A().page().widget(page_name + "_ListViewBase_0").onItemClick(onItemClick);
    return initBaseView();
  };

  initPage = function() {
    if (is_open === false) {
      _global_data = {};
      _local_data = {
        index: [],
        data: {}
      };
      _fav_id_arr = {};
      _listview_data = {
        todo_count: 0,
        done_count: 0,
        pullable: false,
        hasFooterDivider: true,
        hasHeaderDivider: false,
        hasFloatButton: false,
        hasFixedTitle: false,
        dividerHeight: 0,
        dividerColor: "#cccccc",
        data: []
      };
      initColumnData();
      return getNetResource();
    }
  };

  onPageSelected = function(res) {
    initPage();
    return $A().page("page_home").param("_now_offset").then(function(data) {
      if (parseInt(data) === parseInt(offset) || (parseInt(offset) === 0 && data === "")) {
        return $A().page("page_home").widget("ActionBar").title({
          title: getCurrentDay("" + offset),
          icon: "justClick"
        });
      }
    });
  };

  onResume = function() {
    return $A().page("page_home").param("_now_offset").then(function(data) {
      if (parseInt(data) === parseInt(offset) || (is_open === true && parseInt(offset) === 0 && data === "")) {
        $A().page("page_home").param("_setting_changed").then(function(data) {
          if (data !== "") {
            $A().page("page_home").param({
              key: "_setting_changed",
              value: ""
            });
            addNotifications();
            is_open = false;
            return initPage();
          }
        });
        return $A().page("page_home").param("_data_changed").then(function(data) {
          if (data !== "") {
            $A().page("page_home").param({
              key: "_data_changed",
              value: ""
            });
            is_open = false;
            return initPage();
          }
        });
      }
    });
  };

  onItemInnerClick = function(data) {
    var info, item, items, pageParams, plug, position, temp, updateItemsData, _i, _len, _ref;
    if (data.target === "cloumnItem") {
      updateItemsData = [];
      if (data.columnName === "更多") {
        plug = {};
        plug.viewType = "ListViewCellColumn";
        plug.hasFooterDivider = "true";
        plug.viewConfig = {
          colNum: 5,
          hSpace: 5,
          vSpace: 8
        };
        items = [];
        iterator(items, _global_data["uniqueItemName"], 0, _global_data["uniqueItemName"].length);
        listViewMaker(items, "收起", "webview/images/icon/default/column_more.png");
        plug.items = items;
        updateItemsData.push({
          position: data.position,
          data: plug
        });
        return $A().page().widget(page_name + "_ListViewBase_0").updateItems({
          data: updateItemsData
        });
      } else if (data.columnName === "收起") {
        plug = {};
        plug.viewType = "ListViewCellColumn";
        plug.viewConfig = {
          colNum: 5,
          hSpace: 5,
          vSpace: 8
        };
        items = [];
        iterator(items, _global_data["uniqueItemName"], 0, 4);
        listViewMaker(items, "更多", "webview/images/icon/default/column_more.png");
        plug.items = items;
        updateItemsData.push({
          position: data.position,
          data: plug
        });
        return $A().page().widget(page_name + "_ListViewBase_0").updateItems({
          data: updateItemsData
        });
      } else {
        pageParams = [];
        _ref = _global_data["newData"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          temp = _ref[_i];
          if (data.columnName === temp.cName) {
            pageParams.push({
              cId: temp.cId,
              fId: temp.fId
            });
          }
        }
        info = {
          columnName: "" + data.columnName,
          pageParams: pageParams
        };
        return $A().app().openPage({
          page_name: "page_column_detail",
          params: {
            info: JSON.stringify(info)
          },
          close_option: ""
        });
      }
    } else if (data.target === "dateSelect") {
      _pagerwidget_data.offset = parseInt(parseInt(offset) + parseInt(data.offset));
      return $A().page("page_home").widget("page_home_PagerWidget_0").refreshData(JSON.stringify(_pagerwidget_data));
    } else {
      item = _listview_data.data[data.position];
      position = data.position;
      if (data.target === "rightBtn") {
        _pagerwidget_data.offset = parseInt(parseInt(offset) + 1);
        $A().page("page_home").widget("page_home_PagerWidget_0").refreshData(JSON.stringify(_pagerwidget_data));
      }
      if (data.target === "leftBtn") {
        _pagerwidget_data.offset = parseInt(parseInt(offset) - 1);
        $A().page("page_home").widget("page_home_PagerWidget_0").refreshData(JSON.stringify(_pagerwidget_data));
      }
      if (data.target === "title_button") {
        $A().page().setTimeout("100").then(function() {
          return $A().app().openPage({
            page_name: "page_course_time_choose",
            params: {},
            close_option: ""
          });
        });
      }
      if (data.target === "title_button1") {
        if (item.eventType === "title") {
          return $A().app().showDatepickerConfirm({
            ok: "确 定",
            cancel: "取 消",
            defaultDay: item.item_info.date,
            title: item._title
          }).then(function(data) {
            var date_time;
            if (data.state === "ok") {
              $A().lrucache().set({
                key: "has_add_notifications",
                value: "false"
              });
              $A().app().showLoadingDialog({
                content: item.btn1Title
              });
              date_time = data.value;
              return $A().app().callApi({
                method: "users/courses/set_day",
                fav_id: item.item_info.fav_id,
                day_type: item.item_info.day_type,
                date_time: date_time,
                cacheTime: 0
              }).then(function(data) {
                var day_type;
                $A().page().setTimeout("400").then(function() {
                  return $A().app().closeLoadingDialog();
                });
                if ((data != null) && (data.success != null) && data.success === true) {
                  day_type = "" + item.item_info.day_type;
                  $A().lrucache().get("fav_id_arr").then(function(data) {
                    var fav_id_arr;
                    fav_id_arr = {};
                    fav_id_arr = (data != null) && data !== "" ? JSON.parse(data) : {};
                    fav_id_arr["" + item.item_info.fav_id].info["" + day_type] = date_time;
                    return $A().lrucache().set({
                      key: "fav_id_arr",
                      value: JSON.stringify(fav_id_arr)
                    });
                  });
                  return $A().page().setTimeout("400").then(function() {
                    $A().app().makeToast(item.btn1Title + "成功,正在刷新页面...");
                    addNotifications();
                    is_open = false;
                    return initPage();
                  });
                } else if ((data != null) && (data.errors != null)) {
                  if (data.errors === "没有网络") {
                    return $A().app().makeToast("请打开网络,然后再" + item.btn1Title + "。");
                  } else {
                    return $A().app().makeToast("网络环境不好，请重试！");
                  }
                }
              });
            }
          });
        }
      }
    }
  };

  onItemClick = function(data) {
    var i, info, inner_item, item, percent, position, updateItemsData, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
    updateItemsData = [];
    item = _listview_data.data[data.position];
    info = item.item_info;
    position = data.position;
    if ((_ref = item.eventType) === "set_time" || _ref === "todo" || _ref === "survey" || _ref === "article_list") {
      return $A().app().openPage({
        page_name: _cfg.list_page_name[item.eventType].page_name,
        params: {
          info: JSON.stringify(info)
        },
        close_option: ""
      });
    } else if (item.eventType === "set_course") {
      return $A().app().showConfirm({
        ok: "扫一扫",
        title: "添加课程",
        cancel: "课程码",
        message: "通过“扫一扫”或输入“课程码”添加课程。"
      }).then(function(data) {
        if (data.state === "ok") {
          return $A().page().setTimeout("500").then(function() {
            return $A().page("page_home").openQRCapture({});
          });
        } else {
          return $A().app().openPage({
            page_name: "page_course_search",
            params: {},
            close_option: ""
          });
        }
      });
    } else if ((_ref1 = item.eventType) === "article" || _ref1 === "remind" || _ref1 === "tips") {
      if (item.is_expanded) {
        item._centerBottomdesColor = _cfg._centerBottomdesColor;
        item.centerBottomdes = item.centerBottomdes2;
        item.centerBottomdes2 = "";
        if (item.eventType !== "remind") {
          item.rightImage.imageSrc = "" + _cfg.listview_right_img;
        }
        if (item.eventType === "article") {
          item.hasFooterDivider = "true";
          item._bottomDivider = _cfg._bottomDivider;
          _ref2 = item.item_info.item_lists;
          for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
            inner_item = _ref2[i];
            _listview_data.data[parseInt(position) + i + 1].viewType = "ListViewCellNull";
          }
        }
      } else {
        item.centerBottomdes2 = item.centerBottomdes;
        item.centerBottomdes = "";
        if (item.eventType !== "remind") {
          item.rightImage.imageSrc = "" + _cfg.listview_right_down_img;
        }
        if (item.eventType === "article") {
          item._bottomDivider = {};
          item.hasFooterDivider = "false";
          _ref3 = item.item_info.item_lists;
          for (i = _j = 0, _len1 = _ref3.length; _j < _len1; i = ++_j) {
            inner_item = _ref3[i];
            _listview_data.data[parseInt(position) + i + 1].viewType = "ListViewCellLine";
          }
        }
      }
      if (item.action_type !== "done") {
        item.leftImage.imageSrc = _cfg.src_prefix + "done.png";
        item._centerTitleColor = _cfg._centerTitleColorDone;
        updateState("done", "", "" + item.item_info.fav_id, "" + item.item_info.id);
        item.action_type = "done";
        _listview_data.done_count = _listview_data.done_count + 1;
        _listview_data.todo_count = _listview_data.todo_count;
        percent = Math.ceil((_listview_data.done_count / _listview_data.todo_count) * 100);
        if (percent > 100) {
          percent = 100;
        }
        circleProgressBar.progressBarInnerNumPre = percent === 100 ? percent : _progressBarInnerNum;
        circleProgressBar.progressBarInnerNum = percent;
        _progressBarInnerNum = circleProgressBar.progressBarInnerNum;
      }
      item.is_expanded = !item.is_expanded;
      _listview_data.data[position] = item;
      updateItemsData.push({
        position: position,
        data: item
      });
      if (item.eventType === "article") {
        _ref4 = item.item_info.item_lists;
        for (i = _k = 0, _len2 = _ref4.length; _k < _len2; i = ++_k) {
          inner_item = _ref4[i];
          updateItemsData.push({
            position: parseInt(position) + i + 1,
            data: _listview_data.data[parseInt(position) + i + 1]
          });
        }
      }
      return $A().page().widget(page_name + "_ListViewBase_0").updateItems({
        data: updateItemsData
      });
    }
  };

  initColumnData = function() {
    return $A().lrucache().get("column_arr").then(function(data) {
      var colItems, dataTemp, favId, i, items, newData, uniqueItemName, _i, _j, _len, _len1, _ref;
      dataTemp = JSON.parse(data);
      newData = [];
      uniqueItemName = [];
      if ((data != null) && data.length !== 0) {
        for (favId in dataTemp) {
          colItems = dataTemp[favId];
          for (_i = 0, _len = colItems.length; _i < _len; _i++) {
            items = colItems[_i];
            newData.push({
              fId: favId,
              cId: items.key,
              cName: items.value
            });
          }
        }
        for (_j = 0, _len1 = newData.length; _j < _len1; _j++) {
          i = newData[_j];
          if (!(_ref = i.cName, __indexOf.call(uniqueItemName, _ref) >= 0)) {
            uniqueItemName.push(i.cName);
          }
        }
        _global_data["newData"] = newData;
        _global_data["uniqueItemName"] = uniqueItemName;
      }
      return "_false";
    });
  };

  viewControl = function() {
    var items, list_data, plugin;
    list_data = [];
    if ((_global_data["uniqueItemName"] != null) && _global_data["uniqueItemName"].length > 0) {
      plugin = {};
      plugin.viewType = "ListViewCellColumn";
      plugin.viewConfig = {
        colNum: 5,
        hSpace: 5,
        vSpace: 8
      };
      items = [];
      if (_global_data["uniqueItemName"].length > 5) {
        iterator(items, _global_data["uniqueItemName"], 0, 4);
        listViewMaker(items, "更多", "webview/images/icon/default/column_more.png");
      } else {
        iterator(items, _global_data["uniqueItemName"], 0, _global_data["uniqueItemName"].length);
      }
      plugin.items = items;
      list_data.push(plugin);
    }
    return list_data;
  };

  listViewMaker = function(items, columnText, imgSrc) {
    items.push({
      imageModel: {
        imageType: "assets",
        imageSize: "custom",
        imageSrc: "" + imgSrc
      },
      text: columnText
    });
    return "_false";
  };

  iterator = function(items, data, from, end) {
    var tempImgSrc, _results;
    tempImgSrc = "webview/images/icon/default/column_item.png";
    _results = [];
    while (from < end) {
      listViewMaker(items, data[from], tempImgSrc);
      _results.push(from = from + 1);
    }
    return _results;
  };

  dateSelectWidget = function() {
    var Items, Temp, TempArray, datestr, num, _i;
    TempArray = [];
    Temp = {};
    Temp.viewType = "ListViewCellDateSelect";
    Temp.hasFooterDivider = "true";
    Temp.viewConfig = {
      colNum: 7,
      hSpace: 15,
      vSpace: 0,
      bgColor: 0xffecebdf
    };
    Items = [];
    for (num = _i = -3; _i <= 3; num = ++_i) {
      datestr = getCurrentDay(parseInt(offset) + parseInt(num));
      Items.push({
        date: {
          week: getWeek(datestr),
          dateTime: datestr.substr(datestr.indexOf("-") + 1)
        },
        content: "",
        offset: getDayDiff(datestr, getCurrentDay(offset))
      });
    }
    Temp.items = Items;
    TempArray.push(Temp);
    return TempArray;
  };

  getNetResource = function() {
    date = getCurrentDay(offset);
    $A().page("page_home").param("_now_offset").then(function(data) {
      if (parseInt(data) === parseInt(offset) && date !== "") {
        return $A().page("page_home").widget("ActionBar").title({
          title: getCurrentDay("" + offset),
          icon: "justClick"
        });
      }
    });
    return $A().lrucache().get("fav_id_arr").then(function(fav_id_arr) {
      var course_id, day_names, day_names_valid, fav_id_index, fav_id_info, is_suggest_time, item, k_fav_id, key_day_name, now_day, temp, v_fav_id, value_day_name, _i, _len, _ref;
      if ((fav_id_arr != null) && fav_id_arr !== "") {
        fav_id_arr = JSON.parse(fav_id_arr);
        _fav_id_arr = fav_id_arr;
        for (k_fav_id in _fav_id_arr) {
          v_fav_id = _fav_id_arr[k_fav_id];
          fav_id_info = v_fav_id.info;
          fav_id_index = v_fav_id.index;
          course_id = fav_id_info.id;
          day_names = {
            "day_1_time": {
              "name": "day_1_name"
            },
            "day_2_time": {
              "name": "day_2_name"
            },
            "day_3_time": {
              "name": "day_3_name"
            },
            "day_4_time": {
              "name": "day_4_name"
            },
            "day_5_time": {
              "name": "day_5_name"
            }
          };
          day_names_valid = [];
          for (key_day_name in day_names) {
            value_day_name = day_names[key_day_name];
            if (((fav_id_info[value_day_name.name] != null) && fav_id_info[value_day_name.name] !== "") || ((v_fav_id.info.suggest_times["" + key_day_name] != null) && v_fav_id.info.suggest_times["" + key_day_name] !== "")) {
              is_suggest_time = (fav_id_info["" + key_day_name] != null) && fav_id_info["" + key_day_name] !== "" ? false : true;
              now_day = (fav_id_info["" + key_day_name] != null) && fav_id_info["" + key_day_name] !== "" ? fav_id_info["" + key_day_name] : v_fav_id.info.suggest_times[key_day_name];
              temp = {};
              temp = {
                is_suggest_time: is_suggest_time,
                course_title: fav_id_info["title"],
                fav_id: k_fav_id,
                day_x_name: value_day_name.name,
                day_type: "" + key_day_name,
                name: fav_id_info["" + value_day_name.name],
                date: now_day,
                offset: now_day != null ? "" + (getDayDiff(date, now_day)) : ""
              };
              day_names_valid.push(temp);
            }
          }
          _local_data.data["" + k_fav_id] = day_names_valid;
          for (_i = 0, _len = day_names_valid.length; _i < _len; _i++) {
            item = day_names_valid[_i];
            if (_ref = course_id + "_" + item.day_x_name + "_" + item.offset, __indexOf.call(fav_id_index, _ref) >= 0) {
              item.index = course_id + "_" + item.day_x_name + "_" + item.offset;
              _local_data.index.push(item);
            }
          }
        }
      }
      if ((_platform != null) && _platform === "ios") {
        $A().app().log("getNetResource 4");
      }
      return formatNetResource();
    });
  };

  formatNetResource = function() {
    var i, item, keys, listview_data_temp, listview_data_top, _i, _len, _ref;
    if ((_platform != null) && _platform === "ios") {
      $A().app().log("formatNetResource.....................start _local_data:" + (JSON.stringify(_local_data)));
    }
    listview_data_top = [];
    listview_data_temp = [];
    keys = [];
    _ref = _local_data.index;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      item = _ref[i];
      keys.push(item.index);
    }
    return $A().lrucache().massGet(JSON.stringify(keys)).then(function(res) {
      var inner_item, j, listview_data_temp_group, listview_data_temp_title, local_data_inner_item, resk, resv, rightText, value, _j, _k, _l, _len1, _len2, _len3, _ref1, _ref2;
      for (resk in res) {
        resv = res[resk];
        resv = JSON.parse(resv);
        listview_data_temp_title = [];
        listview_data_temp_group = [];
        value = {};
        for (i = _j = 0, _len1 = resv.length; _j < _len1; i = ++_j) {
          item = resv[i];
          if (i === 0) {
            _ref1 = _local_data.index;
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              local_data_inner_item = _ref1[_k];
              if (local_data_inner_item.index === resk) {
                value = local_data_inner_item;
                break;
              }
            }
            if (parseInt(value.offset) === 0) {
              rightText = value.name + "当天";
            } else if (parseInt(value.offset) < 0) {
              rightText = value.name + "前" + (-parseInt(value.offset)) + "天";
            } else if (parseInt(value.offset) > 0) {
              rightText = value.name + "后" + (parseInt(value.offset)) + "天";
            }
            listview_data_temp_title.push({
              eventType: "title",
              item_info: value,
              _backgroundColor: {
                _clickable: false,
                pressed: "#f2f2f2",
                selected: "#f2f2f2",
                normal: "#f2f2f2"
              },
              viewType: "ListViewCellTextWithButton",
              title: "" + item.title,
              btnTitle: !value.is_suggest_time ? "" + rightText : void 0,
              btn1Title: value.is_suggest_time ? rightText + "[设置" + value.name + "时间]" : "",
              _title: "设置" + value.name + "时间",
              hasFooterDivider: "true"
            });
          } else {
            listview_data_temp_group.push({
              item_info: item,
              kf_course_item_type_id: item.kf_course_item_type_id,
              fav_id_id: item.fav_id_id,
              action_type: "",
              is_expanded: false,
              fav_id: item.fav_id,
              eventType: _cfg.list_config[item.kf_course_item_type_id].name,
              viewType: "ListViewCellLine",
              _rightLayoutSize: 25,
              _leftLayoutSize: 40,
              _bottomDivider: !(item.kf_course_item_type_id === 2 && (item.is_expanded != null) && item.is_expanded === true) ? _cfg._bottomDivider : void 0,
              leftImage: {
                imageType: "assets",
                imageSize: "fitSize",
                imageSrc: "" + _cfg.src_prefix + _cfg.list_config[item.kf_course_item_type_id].name + ".png"
              },
              centerTitle: item.title,
              centerRighttopdes: (item.item_type_name != null) && item.item_type_name !== "undefined" ? "" + item.item_type_name : void 0,
              _centerBottomdesColor: _cfg._centerBottomdesColor,
              _centerTitleColor: _cfg._centerTitleColor,
              centerRighttopdes: (item.item_colum != null) && item.item_colum !== "" ? item.item_colum : item.item_type_name,
              centerBottomdes: item.content != null ? "" + item.content : "",
              _centerBottomdes2Color: _cfg._centerBottomdes2Color,
              rightImage: {
                imageType: "assets",
                imageSize: "fitSize",
                imageSrc: "" + _cfg.listview_right_img
              },
              hasFooterDivider: "true"
            });
            if ((item.item_lists != null) && item.item_count > 0) {
              if (item.kf_course_item_type_id === 2) {
                _ref2 = item.item_lists;
                for (j = _l = 0, _len3 = _ref2.length; _l < _len3; j = ++_l) {
                  inner_item = _ref2[j];
                  inner_item.subtitle = item.title;
                  inner_item.item_colum = (item.item_colum != null) && item.item_colum !== "" ? item.item_colum : item.item_type_name;
                  listview_data_temp_group.push({
                    item_info: inner_item,
                    kf_course_item_type_id: item.kf_course_item_type_id,
                    eventType: "article_list",
                    action_type: "",
                    viewType: (item.is_expanded != null) && item.is_expanded === true ? "ListViewCellLine" : "ListViewCellNull",
                    _rightLayoutSize: 25,
                    _leftLayoutSize: 40,
                    centerBottomdes2: inner_item.title && inner_item.title !== "undefined" ? "" + inner_item.title : void 0,
                    _centerBottomdes2Color: _cfg._centerBottomdesColor_article_list,
                    _bottomDivider: item.item_count === j + 1 ? _cfg._bottomDivider : void 0,
                    hasFooterDivider: item.item_count === j + 1 ? "true" : void 0
                  });
                }
              }
            }
          }
        }
        listview_data_temp = listview_data_temp.concat(listview_data_temp_title).concat(listview_data_temp_group);
      }
      _listview_data.data = [];
      listview_data_top = listview_data_top.concat(getCourseContent_getGlobalNotices());
      return getCourseContent_showData(listview_data_top, listview_data_temp);
    });
  };

  getCourseContent_showData = function(data1, data2) {
    var count_cache_keys, i, item, keys, _i, _len;
    count_cache_keys = {};
    keys = [];
    for (i = _i = 0, _len = data2.length; _i < _len; i = ++_i) {
      item = data2[i];
      if ((item.fav_id_id != null) && item.fav_id_id !== "") {
        count_cache_keys[item.fav_id_id] = i;
        keys.push(item.fav_id_id);
      }
    }
    circleProgressBar.progressBarInnerText = "完成度";
    if (keys.length !== 0) {
      $A().lrucache().massGet(JSON.stringify(keys)).then(function(res) {
        var count, done_count, k, percent, resk, resv, todo_count, v, _j, _len1, _ref;
        for (resk in res) {
          resv = res[resk];
          count = 0;
          item = data2[count_cache_keys[resk]];
          if (typeof resv === "string" && resv !== "done") {
            if (resv !== "") {
              count = resv.split(",").length;
            }
          } else if (typeof resv === "string" && resv === "done") {
            item.action_type = "done";
          } else {
            for (k in resv) {
              v = resv[k];
              count = count + 1;
            }
          }
          if (count !== 0 && count === item.item_info.item_count) {
            item.action_type = "done";
          }
        }
        todo_count = 0;
        done_count = 0;
        for (i = _j = 0, _len1 = data2.length; _j < _len1; i = ++_j) {
          item = data2[i];
          if ((item.fav_id_id != null) && item.fav_id_id !== "") {
            todo_count = todo_count + 1;
          }
          if ((item.action_type != null) && item.action_type !== "undefined" && item.action_type === "done") {
            done_count = done_count + 1;
            item.leftImage.imageSrc = _cfg.src_prefix + "done.png";
            item._centerTitleColor = _cfg._centerTitleColorDone;
          }
          if ((item.action_type != null) && item.action_type !== "undefined" && ((_ref = item.eventType) === "remind" || _ref === "article" || _ref === "tips") && (item.is_expanded != null) && item.is_expanded === true) {
            item.centerBottomdes2 = item.centerBottomdes;
            item.centerBottomdes = "";
            item.rightImage.imageSrc = "" + _cfg.listview_right_down_img;
          }
        }
        if (todo_count > 0) {
          percent = Math.ceil((done_count / todo_count) * 100);
          if (percent > 100) {
            percent = 100;
          }
          _listview_data.done_count = done_count;
          _listview_data.todo_count = todo_count;
        }
        circleProgressBar.progressBarInnerNumPre = percent === 100 ? percent : _progressBarInnerNum;
        circleProgressBar.progressBarInnerNum = percent;
        return _progressBarInnerNum = circleProgressBar.progressBarInnerNum;
      });
    }
    if ((_platform != null) && _platform === "android") {
      _listview_data.data = dateSelectWidget().concat(viewControl()).concat(data1).concat(data2);
    } else {
      _listview_data.data = dateSelectWidget().concat(viewControl()).concat(data1).concat(data2);
    }
    $A().page().setTimeout("100").then(function() {
      return $A().page().widget(page_name + "_ListViewBase_0").refreshData(JSON.stringify(_listview_data));
    });
    return is_open = true;
  };

  getCourseContent_getGlobalNotices = function() {
    var count, data_all_items, data_items, item, items, k, notice, notices, v, _i, _j, _len, _len1, _ref;
    data_items = 0;
    data_all_items = 0;
    _ref = _local_data.data;
    for (k in _ref) {
      v = _ref[k];
      for (_i = 0, _len = v.length; _i < _len; _i++) {
        item = v[_i];
        data_all_items = data_all_items + 1;
        if ((item["date"] != null) && item["date"] !== "") {
          data_items = data_items + 1;
        }
      }
    }
    items = [];
    notices = [];
    count = 0;
    for (k in _fav_id_arr) {
      v = _fav_id_arr[k];
      count = count + 1;
    }
    if (count === 0) {
      notices.push({
        eventType: "set_course",
        centerTitle: "添加新课程",
        itemInfo: {}
      });
    } else if (_local_data.index.length === 0 && (data_items === 0 || data_items !== data_all_items)) {
      notices.push({
        eventType: "set_time",
        centerTitle: "设置课程时间",
        itemInfo: {}
      });
    } else if (_local_data.index.length === 0 && data_items !== 0) {
      notices.push({
        eventType: "",
        centerTitle: "今天没有要做的事情，请查看其他时间。或点击右上角“加号”，扫一扫添加新课程。",
        itemInfo: {}
      });
    }
    for (_j = 0, _len1 = notices.length; _j < _len1; _j++) {
      notice = notices[_j];
      items.push({
        item_info: notice.itemInfo,
        centerTitle: notice.centerTitle,
        eventType: notice.eventType,
        action_type: "",
        viewType: "ListViewCellLine",
        _rightLayoutSize: 0,
        _leftLayoutSize: (notice.eventType != null) && notice.eventType !== "" ? 40 : 0,
        _bottomDivider: _cfg._bottomDivider,
        hasFooterDivider: "true",
        leftImage: (notice.eventType != null) && notice.eventType !== "" ? {
          imageType: "assets",
          imageSize: "fitSize",
          imageSrc: _cfg.src_prefix + "remind.png"
        } : void 0,
        rightImage: (notice.eventType != null) && notice.eventType !== "" ? {
          imageType: "assets",
          imageSize: "fitSize",
          imageSrc: _cfg.src_prefix + "listview_right.png"
        } : void 0
      });
    }
    return items;
  };

  initBaseView = function() {
    $A().page().widget(page_name + "_ListViewBase_0").refreshData(JSON.stringify({
      pullable: false,
      hasFooterDivider: false,
      hasHeaderDivider: false,
      hasFloatButton: false,
      hasFixedTitle: false,
      dividerHeight: 0,
      dividerColor: "#cccccc",
      data: []
    }));
    return $A().page().param("offset").then(function(res) {
      return $A().page("page_home").param("is_first_open").then(function(is_first_open) {
        offset = res;
        if (parseInt(offset) === 0 && is_first_open === "true") {
          onPageSelected();
          return $A().page().setTimeout("3000").then(function() {
            $A().app().callApi({
              method: "projects/detail",
              cacheTime: 0
            }).then(function(res) {
              $A().app().log(JSON.stringify(res));
              $A().app().preference({
                key: "net_version_num",
                value: res.version_num
              });
              $A().app().preference({
                key: "net_version_url",
                value: res.download_url
              });
              return $A().app().getAppVersion().then(function(version) {
                if (parseFloat(res.version_num) > parseFloat(version)) {
                  if (res.update_des == null) {
                    res.update_des = "";
                  }
                  $A().app().confirmDownloadNewVersion({
                    ok: "下载",
                    data: res.update_des != null ? ("最新版本:" + res.version_num + "\n\n【更新内容】\n") + res.update_des : void 0
                  });
                }
              });
            });
            updateAllCourses();
            addNotifications();
            return downLoadAllCourses();
          });
        }
      });
    });
  };

  updateAllCourses = function() {
    return $A().lrucache().get("fav_id_arr").then(function(data) {
      var fav_id_arr, fav_ids, k_fav_id, v_fav_id;
      fav_id_arr = {};
      fav_ids = [];
      fav_id_arr = (data != null) && data !== "" ? JSON.parse(data) : {};
      for (k_fav_id in fav_id_arr) {
        v_fav_id = fav_id_arr[k_fav_id];
        fav_ids.push(parseInt(k_fav_id));
      }
      if (fav_ids.length !== 0) {
        return $A().app().callApi({
          method: "courses/checkupdate",
          fav_ids: fav_ids,
          cacheTime: 0
        }).then(function(res1) {
          var update_fav_id, update_fav_ids, v_updated_at, _i, _len, _results;
          update_fav_ids = [];
          for (k_fav_id in res1) {
            v_updated_at = res1[k_fav_id];
            if (fav_id_arr["" + k_fav_id].info.updated_at !== v_updated_at) {
              update_fav_ids.push(k_fav_id);
            }
          }
          _results = [];
          for (_i = 0, _len = update_fav_ids.length; _i < _len; _i++) {
            update_fav_id = update_fav_ids[_i];
            _results.push(updateCourseByCourseCode(fav_id_arr["" + update_fav_id]));
          }
          return _results;
        });
      }
    });
  };

  updateCourseByCourseCode = function(fav_id_item) {
    var column_data, column_types;
    column_data = {};
    column_types = [];
    return $A().app().callApi({
      method: "courses/package",
      course_code: fav_id_item.info.code,
      cacheTime: 0
    }).then(function(res) {
      var column_types_with_id, course_id, course_id_index_arr, fav_id, i, item, item_column_types, j, k, k_day_time, key_day_time, v, v_day_time, value_day_time, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
      if ((res.errors != null) && (res.errors.error_num != null) && res.errors.error_num === "100000") {
        $A().app().makeToast("网络状态不好，正在拼命加载中");
        updateCourseByCourseCode(fav_id_item);
      }
      if ((res.errors != null) && res.errors === "没有网络") {
        return;
      }
      $A().lrucache().set({
        key: "has_add_notifications",
        value: "false"
      });
      addNotifications();
      fav_id = res.detail.fav_id;
      course_id = res.detail.id;
      course_id_index_arr = [];
      _ref = res.contents;
      for (key_day_time in _ref) {
        value_day_time = _ref[key_day_time];
        course_id_index_arr.push("" + key_day_time);
      }
      _ref1 = fav_id_item.info;
      for (k in _ref1) {
        v = _ref1[k];
        if (k === "day_1_time" || k === "day_2_time" || k === "day_3_time" || k === "day_4_time" || k === "day_5_time") {
          res.detail[k] = v;
        }
      }
      $A().lrucache().get("fav_id_arr").then(function(data) {
        var fav_id_arr;
        fav_id_arr = {};
        fav_id_arr = (data != null) && data !== "" ? JSON.parse(data) : {};
        fav_id_arr[fav_id] = {
          info: res.detail,
          index: course_id_index_arr
        };
        return $A().lrucache().set({
          key: "fav_id_arr",
          value: JSON.stringify(fav_id_arr)
        });
      });
      _ref2 = res.contents;
      for (k_day_time in _ref2) {
        v_day_time = _ref2[k_day_time];
        $A().lrucache().set({
          key: "" + k_day_time,
          value: JSON.stringify(v_day_time)
        });
      }
      _ref3 = res.contents;
      for (k_day_time in _ref3) {
        v_day_time = _ref3[k_day_time];
        for (i = _i = 0, _len = v_day_time.length; _i < _len; i = ++_i) {
          item = v_day_time[i];
          if ((item.item_colum != null) && item.item_colum !== "") {
            item["day_offset"] = k_day_time.substr(k_day_time.lastIndexOf("_") + 1);
            item["day_name"] = res.detail[k_day_time.substring(k_day_time.indexOf("_") + 1, k_day_time.lastIndexOf("_"))];
            if (!(_ref4 = item.item_colum, __indexOf.call(column_types, _ref4) >= 0)) {
              column_types.push(item.item_colum);
              column_data["" + item.item_colum] = [];
            }
            column_data["" + item.item_colum].push(item);
          }
        }
      }
      column_types_with_id = [];
      for (j = _j = 0, _len1 = column_types.length; _j < _len1; j = ++_j) {
        item_column_types = column_types[j];
        column_types_with_id.push({
          key: "" + j,
          value: "" + item_column_types
        });
        $A().lrucache().set({
          key: "column_" + j + "_" + fav_id,
          value: JSON.stringify(column_data["" + item_column_types])
        });
      }
      $A().lrucache().get("column_arr").then(function(data) {
        var column_arr;
        column_arr = {};
        column_arr = (data != null) && data !== "" ? JSON.parse(data) : {};
        column_arr[fav_id] = column_types_with_id;
        return $A().lrucache().set({
          key: "column_arr",
          value: JSON.stringify(column_arr)
        });
      });
      return $A().lrucache().set({
        key: "download_all_courses",
        value: "true"
      });
    });
  };

  downLoadAllCourses = function() {
    return $A().lrucache().get("download_all_courses").then(function(data) {
      var groups;
      if ((data != null) && data === "true") {
        return;
      }
      groups = [];
      return $A().app().callApi({
        method: "users/courses",
        cacheTime: 0
      }).then(function(res) {
        var item, item1, _i, _j, _len, _len1, _ref;
        if ((res != null) && res !== "" && (res.items != null) && res.items !== "") {
          _ref = res.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (parseInt(item.state) === 1) {
              groups.push(item);
            }
          }
          if (groups.length !== 0) {
            $A().app().showLoadingDialog({
              content: "正在导入课程数据,请稍候！"
            });
            for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
              item1 = groups[_j];
              addCourseBycourseCode(item1.course_info.code);
            }
            return $A().page().setTimeout("5000").then(function() {
              $A().app().closeLoadingDialog();
              $A().app().makeToast("课程数据导入成功，即将重启康复助手！");
              $A().lrucache().set({
                key: "download_all_courses",
                value: "true"
              });
              return $A().page().setTimeout("1000").then(function() {
                return $A().app().openIntent("restart");
              });
            });
          }
        }
      });
    });
  };

  addCourseBycourseCode = function(course_code) {
    var column_data, column_types;
    column_data = {};
    column_types = [];
    return $A().app().callApi({
      method: "courses/package",
      course_code: course_code,
      cacheTime: 0
    }).then(function(res) {
      var column_types_with_id, course_id, course_id_index_arr, fav_id, i, item, item_column_types, j, k_day_time, key_day_time, v_day_time, value_day_time, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      if ((res.errors != null) && (res.errors.error_num != null) && res.errors.error_num === "100000") {
        $A().app().makeToast("网络状态不好，请重试");
        return "_false";
      }
      if ((res.errors != null) && res.errors === "没有网络") {
        $A().app().makeToast("请开启网络");
        return "_false";
      }
      fav_id = res.detail.fav_id;
      course_id = res.detail.id;
      course_id_index_arr = [];
      _ref = res.contents;
      for (key_day_time in _ref) {
        value_day_time = _ref[key_day_time];
        course_id_index_arr.push("" + key_day_time);
      }
      $A().lrucache().get("fav_id_arr").then(function(data) {
        var fav_id_arr;
        fav_id_arr = {};
        fav_id_arr = (data != null) && data !== "" ? JSON.parse(data) : {};
        fav_id_arr[fav_id] = {
          info: res.detail,
          index: course_id_index_arr
        };
        return $A().lrucache().set({
          key: "fav_id_arr",
          value: JSON.stringify(fav_id_arr)
        });
      });
      _ref1 = res.contents;
      for (k_day_time in _ref1) {
        v_day_time = _ref1[k_day_time];
        $A().lrucache().set({
          key: "" + k_day_time,
          value: JSON.stringify(v_day_time)
        });
      }
      _ref2 = res.contents;
      for (k_day_time in _ref2) {
        v_day_time = _ref2[k_day_time];
        for (i = _i = 0, _len = v_day_time.length; _i < _len; i = ++_i) {
          item = v_day_time[i];
          if ((item.item_colum != null) && item.item_colum !== "") {
            item["day_offset"] = k_day_time.substr(k_day_time.lastIndexOf("_") + 1);
            item["day_name"] = res.detail[k_day_time.substring(k_day_time.indexOf("_") + 1, k_day_time.lastIndexOf("_"))];
            if (!(_ref3 = item.item_colum, __indexOf.call(column_types, _ref3) >= 0)) {
              column_types.push(item.item_colum);
              column_data["" + item.item_colum] = [];
            }
            column_data["" + item.item_colum].push(item);
          }
        }
      }
      column_types_with_id = [];
      for (j = _j = 0, _len1 = column_types.length; _j < _len1; j = ++_j) {
        item_column_types = column_types[j];
        column_types_with_id.push({
          key: "" + j,
          value: "" + item_column_types
        });
        $A().lrucache().set({
          key: "column_" + j + "_" + fav_id,
          value: JSON.stringify(column_data["" + item_column_types])
        });
      }
      $A().lrucache().get("column_arr").then(function(data) {
        var column_arr;
        column_arr = {};
        column_arr = (data != null) && data !== "" ? JSON.parse(data) : {};
        column_arr[fav_id] = column_types_with_id;
        return $A().lrucache().set({
          key: "column_arr",
          value: JSON.stringify(column_arr)
        });
      });
      $A().lrucache().set({
        key: "download_all_courses",
        value: "true"
      });
      return "_true";
    });
  };

  updateState = function(action_type, action, kf_course_user_fav_id, course_index_id) {
    var update_all, update_item;
    $A().lrucache().set({
      key: kf_course_user_fav_id + "_" + course_index_id,
      value: "" + action_type
    });
    update_all = [];
    update_item = {
      action: action,
      action_type: action_type,
      kf_course_user_fav_id: kf_course_user_fav_id,
      course_index_id: course_index_id
    };
    return $A().app().netState().then(function(net_state) {
      return $A().lrucache().get("update_all").then(function(data) {
        if ((data != null) && data !== "") {
          update_all = JSON.parse(data);
        }
        update_all.push(update_item);
        if (net_state === "offline") {
          return $A().lrucache().set({
            key: "update_all",
            value: update_all
          });
        } else {
          return $A().app().callApi({
            method: "users/courses/course_indices/massaction",
            actions: update_all,
            cacheTime: 0
          }).then(function(res) {
            if ((res.success != null) && res.success === true) {
              return $A().lrucache().remove("update_all");
            } else {
              return $A().lrucache().set({
                key: "update_all",
                value: update_all
              });
            }
          });
        }
      });
    });
  };

  addNotifications = function() {
    return $A().lrucache().get("has_add_notifications").then(function(data) {
      var local_notifications;
      if ((data != null) && data === "true") {
        return;
      }
      $A().notification().clear();
      local_notifications = [];
      return $A().lrucache().get("fav_id_arr").then(function(data) {
        var all_fav_id_ids, fav_id_arr, k_fav_id, v_fav_id;
        fav_id_arr = {};
        all_fav_id_ids = [];
        fav_id_arr = (data != null) && data !== "" ? JSON.parse(data) : {};
        for (k_fav_id in fav_id_arr) {
          v_fav_id = fav_id_arr[k_fav_id];
          $A().lrucache().massGet(JSON.stringify(v_fav_id["index"])).then(function(res) {
            var day, day_arr, day_temp, day_time_item, i, item, notification, resk, resv, time_arr, _results;
            _results = [];
            for (resk in res) {
              resv = res[resk];
              resv = JSON.parse(resv);
              _results.push((function() {
                var _i, _j, _len, _len1, _ref, _results1;
                _results1 = [];
                for (i = _i = 0, _len = resv.length; _i < _len; i = ++_i) {
                  item = resv[i];
                  if ((item.notice_info != null) && item.notice_info !== "") {
                    date = "";
                    _ref = _local_data.data["" + item.fav_id];
                    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                      day_time_item = _ref[_j];
                      if (day_time_item.day_x_name === item.notice_info.notice_day_type) {
                        date = day_time_item.date;
                        break;
                      }
                    }
                    day_arr = date.split('-');
                    time_arr = item.notice_info.notice_time.split(':');
                    day = new Date(parseInt(day_arr[0]), parseInt(Number(day_arr[1]) - 1), Number(day_arr[2]), Number(time_arr[0]), Number(time_arr[1]), Number(time_arr[2]));
                    day_temp = new Date(day.getTime() + 1 * 24 * 60 * 60 * 1000 * parseInt(item.notice_info.notice_day_offset));
                    if (day_temp.getTime() - new Date().getTime() > 0) {
                      notification = {
                        isOpen: "true",
                        title: "" + item.notice_info.notice_title,
                        content: (item.notice_info.notice_content != null) && item.notice_info.notice_content !== "" ? "" + item.notice_info.notice_content : "",
                        notificationId: "" + item.id,
                        broadcastTime: "" + (day_temp.getTime())
                      };
                      local_notifications.push(notification);
                      _results1.push($A().notification().add(notification));
                    } else {
                      _results1.push(void 0);
                    }
                  } else {
                    _results1.push(void 0);
                  }
                }
                return _results1;
              })());
            }
            return _results;
          });
        }
        return $A().page().setTimeout("1000").then(function() {
          if (local_notifications.length !== 0) {
            $A().lrucache().set({
              key: "has_add_notifications",
              value: "true"
            });
            return $A().lrucache().set({
              key: "local_notifications",
              value: local_notifications
            });
          }
        });
      });
    });
  };

  getCurrentDay = function(offset) {
    var current_day_temp, dd, mm, today, yyyy;
    today = new Date();
    current_day_temp = new Date(today.getTime() + 1 * 24 * 60 * 60 * 1000 * offset);
    dd = current_day_temp.getDate();
    mm = current_day_temp.getMonth() + 1;
    yyyy = current_day_temp.getFullYear();
    if (dd < 10) {
      dd = '0' + dd;
    }
    if (mm < 10) {
      mm = '0' + mm;
    }
    return yyyy + "-" + mm + "-" + dd;
  };

  getDayDiff = function(day1_str, day2_str) {
    var day1, day1_arr, day2, day2_arr;
    day1_arr = day1_str.split('-');
    day1 = new Date(parseInt(day1_arr[0]), parseInt(Number(day1_arr[1]) - 1), Number(day1_arr[2]));
    day2_arr = day2_str.split('-');
    day2 = new Date(parseInt(day2_arr[0]), parseInt(Number(day2_arr[1]) - 1), Number(day2_arr[2]));
    return "" + (parseInt(day1.getTime() - day2.getTime()) / 86400000.);
  };

  getWeek = function(dayTime) {
    var backStr, day, dayTimeArr;
    backStr = "";
    dayTimeArr = dayTime.split('-');
    day = new Date(Number(dayTimeArr[0]), Number(dayTimeArr[1]) - 1, Number(dayTimeArr[2]));
    switch (day.getDay()) {
      case 0:
        backStr = "日";
        break;
      case 1:
        backStr = "一";
        break;
      case 2:
        backStr = "二";
        break;
      case 3:
        backStr = "三";
        break;
      case 4:
        backStr = "四";
        break;
      case 5:
        backStr = "五";
        break;
      case 6:
        backStr = "六";
    }
    return backStr;
  };

  $A().page().onCreated(function() {
    return initBasePage();
  });

}).call(this);
