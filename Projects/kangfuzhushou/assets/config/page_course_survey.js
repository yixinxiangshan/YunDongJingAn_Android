// Generated by CoffeeScript 1.9.1
(function() {
  var ECpageClass;

  $A().app().log("page_course_survey");

  ECpageClass = (function() {
    var _cfg, _have_cache, _have_press_position, _info, _local_answers, _mFirstSign, _mViewMethod, _now_index, _res, _server_answers, root;

    root = {};

    ECpageClass.prototype._page_name = "";

    ECpageClass.prototype._platform = "";

    ECpageClass.prototype._listview_data = {
      pullable: false,
      hasFooterDivider: true,
      hasHeaderDivider: false,
      dividerHeight: 0,
      dividerColor: "#cccccc",
      data: [
        {
          viewType: "ListViewCellLine",
          _rightLayoutSize: 0,
          _leftLayoutSize: 20,
          centerTitle: "正在加载......",
          hasFooterDivider: "true"
        }
      ]
    };

    _info = {};

    _res = {};

    _server_answers = null;

    _local_answers = null;

    _now_index = 0;

    _have_press_position = null;

    _mViewMethod = null;

    _mFirstSign = true;

    _have_cache = true;

    _cfg = {
      page_name: "page_course_survey",
      divider_config: {
        imageType: "assets",
        imageSize: "fitSize",
        imageSrc: "webview/images/icon/default/divider.png"
      },
      checked_image_url: "webview/images/icon/default/checkbox_check.png",
      unchecked_image_url: "webview/images/icon/default/checkbox_uncheck_pressed.png",
      radio: "radio",
      checkbox: "checkbox",
      string: "string",
      text: "text"
    };

    ECpageClass.prototype._constructor = function(_page_name1) {
      this._page_name = _page_name1;
      root = this;
      this.prepareForInitView();
      $A().page().widget(this._page_name + "_ListViewBase_0").data(JSON.stringify(this._listview_data));
      $A().page().widget(this._page_name + "_ListViewBase_0").onItemInnerClick(function(data) {
        return root.onItemInnerClick(data);
      });
      $A().page().widget(this._page_name + "_ListViewBase_0").onItemClick(function(data) {
        if (!_have_cache) {
          return root.onItemClick(data);
        }
      });
      return $A().page().onCreated(function() {
        return root.onCreated();
      });
    };

    function ECpageClass(_page_name) {
      this._constructor(_page_name);
    }

    ECpageClass.prototype.onCreated = function() {
      $A().page().widget(this._page_name + "_ListViewBase_0").refreshData(JSON.stringify(this._listview_data));
      return root.showSurvey();
    };

    ECpageClass.prototype.onItemClick = function(data) {
      var item;
      item = root._listview_data.data[data.position];
      if (_mViewMethod === _cfg.checkbox) {
        if (_have_press_position[data.position - 1] === 0) {
          _have_press_position[data.position - 1] = data.position;
        } else {
          _have_press_position[data.position - 1] = 0;
        }
      }
      root.showSurvey_showForm(_res);
      if (item.type === "_option" && _mViewMethod === _cfg.radio) {
        root.saveToCache(item, item.value);
        root.showSurvey_showForm(_res);
      }
      return $A().page("page_home").param({
        key: "_data_changed",
        value: "true"
      });
    };

    ECpageClass.prototype.onItemInnerClick = function(data) {
      var canGoNext, i, item, j, len, res, sign, value;
      canGoNext = true;
      if (_mViewMethod !== _cfg.radio && _mViewMethod !== _cfg.checkbox) {
        value = data._form.value + "";
        if ((value == null) || value.length === 0) {
          canGoNext = false;
          $A().app().makeToast("请输入内容");
        }
        item = root._listview_data.data[1];
        root.saveToCache(item, value);
      } else if (_mViewMethod === _cfg.checkbox) {
        item = root._listview_data.data[_now_index];
        res = "";
        sign = true;
        for (i = j = 0, len = _have_press_position.length; j < len; i = ++j) {
          value = _have_press_position[i];
          if (value !== 0) {
            if (sign) {
              res = res + value;
              sign = false;
            } else {
              res = res + "," + value;
            }
          }
        }
        _have_press_position = null;
        root.saveToCache(item, res);
      }
      _mFirstSign = true;
      if (canGoNext) {
        _now_index = _now_index + 1;
        if (_now_index > _res.items.length - 1) {
          if ((_info.action_type != null) && _info.action_type === "done") {
            return $A().app().closePage();
          }
          root.updateState("done", "" + (JSON.stringify(_local_answers)), "" + _info.fav_id, "" + _info.id);
          return $A().page().setTimeout("500").then(function() {
            $A().page("page_home").param({
              key: "_setting_changed",
              value: "true"
            });
            return $A().app().closePage();
          });
        } else {
          return root.showSurvey_showForm(_res);
        }
      }
    };

    ECpageClass.prototype.onResume = function() {};

    ECpageClass.prototype.onResult = function() {};

    ECpageClass.prototype.prepareForInitView = function() {
      $A().app().platform().then(function(platform) {
        return root._platform = platform;
      });
      return $A().page().param("info").then(function(data) {
        var reg, reg1;
        reg = new RegExp("\r\n", "g");
        reg1 = new RegExp("\t", "g");
        return _info = JSON.parse(data.replace(reg, "\\r\\n").replace(reg1, "\\t"));
      });
    };

    ECpageClass.prototype.showSurvey = function() {
      $A().page().widget("ActionBar").title({
        title: _info.title
      });
      return $A().app().callApi({
        method: "courses/indices/forms",
        item_id: _info.id,
        cacheTime: 0
      }).then(function(res) {
        _res = res;
        root.showSurvey_setAnswerToRes();
        return $A().page().setTimeout("500").then(function() {
          root.isDone();
          return root.showSurvey_showForm(_res);
        });
      });
    };

    ECpageClass.prototype.showSurvey_setAnswerToRes = function() {
      if (_info.action != null) {
        _server_answers = _info.action;
      }
      return $A().lrucache().get(_info.fav_id_id).then(function(data) {
        var i, item, j, k, len, len1, ref, ref1, results, results1;
        if (data !== "") {
          _local_answers = JSON.parse(data);
        }
        if (_server_answers != null) {
          ref = _res.items;
          results = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            item = ref[i];
            if (_server_answers["" + item.id] != null) {
              results.push(item.action = _server_answers["" + item.id]);
            } else {
              results.push(void 0);
            }
          }
          return results;
        } else if (_local_answers != null) {
          ref1 = _res.items;
          results1 = [];
          for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
            item = ref1[i];
            if (_local_answers["" + item.id] != null) {
              results1.push(item.action = _local_answers["" + item.id]);
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }
      });
    };

    ECpageClass.prototype.showSurvey_showForm = function(data) {
      var answers, done_count, form, item, j, len, list_data, mProcessFun, mViewType, ref;
      list_data = [];
      done_count = 0;
      form = {};
      answers = {};
      mViewType = null;
      mProcessFun = null;
      form = data.items[_now_index];
      form.number = _now_index;
      ref = data.items;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (item.action != null) {
          done_count = done_count + 1;
        }
      }
      list_data.push({
        viewType: "ListViewCellLine",
        _rightLayoutSize: 0,
        _leftLayoutSize: 0,
        _bottomDivider: _cfg.divider_config,
        centerTitle: form.title,
        centerRighttopdes: (_now_index + 1) + " / " + data.items.length,
        type: "_title",
        hasFooterDivider: "true"
      });
      root.mViewMaker(list_data, form);
      root.mShowAnswer(list_data, form, false);
      root._listview_data.data = list_data;
      return $A().page().widget(_cfg.page_name + "_ListViewBase_0").refreshData(JSON.stringify(root._listview_data));
    };

    ECpageClass.prototype.mButton = function(list_data) {
      return list_data.push({
        viewType: "ListViewCellButton",
        btnTitle: _now_index === (_res.items.length - 1) ? "完 成" : "进 入 下 一 题",
        btnType: "cancel",
        type: "_submit"
      });
    };

    ECpageClass.prototype.mViewMaker = function(list_data, form) {
      var mProcessFun, mViewType;
      _mViewMethod = form.form_type;
      switch ("" + _mViewMethod) {
        case "radio":
          if (_mFirstSign) {
            if (!_have_cache) {
              form.action = null;
            }
            _mFirstSign = false;
          }
          mViewType = "ListViewCellLine";
          mProcessFun = function(list_data, form, mViewType) {
            var i, j, len, option, ref;
            ref = form.content.split("\r\n");
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
              option = ref[i];
              list_data.push({
                viewType: mViewType,
                _rightLayoutSize: 0,
                _leftLayoutSize: 40,
                _bottomDivider: _cfg.divider_config,
                leftImage: {
                  imageType: "assets",
                  imageSize: "fitSize",
                  imageSrc: (form.action != null) && parseInt(form.action) === i ? _cfg.checked_image_url : _cfg.unchecked_image_url
                },
                centerTitle: option,
                form: form,
                value: i,
                type: "_option",
                hasFooterDivider: "true"
              });
            }
            if (form.action != null) {
              root.mButton(list_data);
              return "_false";
            }
          };
          break;
        case "checkbox":
          mViewType = "ListViewCellLine";
          mProcessFun = function(list_data, form, mViewType) {
            var i, item, j, k, l, len, len1, len2, len3, m, option, ref, ref1, value;
            if (_have_press_position === null) {
              _have_press_position = new Array(form.content.split("\r\n").length);
              for (i = j = 0, len = _have_press_position.length; j < len; i = ++j) {
                item = _have_press_position[i];
                _have_press_position[i] = 0;
              }
              if (_mFirstSign) {
                if (_have_cache && form.action !== null && typeof form.action !== "undefined") {
                  ref = form.action.split(",");
                  for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
                    value = ref[i];
                    if (parseInt(value) - 1 < _have_press_position.length) {
                      _have_press_position[parseInt(value) - 1] = parseInt(value);
                    }
                  }
                }
                _mFirstSign = false;
              }
            }
            ref1 = form.content.split("\r\n");
            for (i = l = 0, len2 = ref1.length; l < len2; i = ++l) {
              option = ref1[i];
              list_data.push({
                viewType: mViewType,
                _rightLayoutSize: 0,
                _leftLayoutSize: 40,
                _bottomDivider: _cfg.divider_config,
                leftImage: {
                  imageType: "assets",
                  imageSize: "fitSize",
                  imageSrc: _have_press_position[i] === 0 ? _cfg.unchecked_image_url : _cfg.checked_image_url
                },
                centerTitle: option,
                form: form,
                value: i,
                type: "_option",
                hasFooterDivider: "true"
              });
            }
            for (m = 0, len3 = _have_press_position.length; m < len3; m++) {
              i = _have_press_position[m];
              if (i !== 0) {
                root.mButton(list_data);
                return "_false";
              }
            }
          };
          break;
        case "string":
          mViewType = "ListViewCellInputText";
          mProcessFun = function(list_data, form, mViewType) {
            list_data.push({
              viewType: mViewType,
              inputType: "text",
              hint: "输入内容",
              lines: 1,
              name: "value",
              inputText: _have_cache ? form.action : void 0,
              form: form,
              enable: _have_cache ? false : true,
              type: "_option",
              hasFooterDivider: "true"
            });
            return root.mButton(list_data);
          };
          break;
        case "text":
          mViewType = "ListViewCellInputText";
          mProcessFun = function(list_data, form, mViewType) {
            list_data.push({
              viewType: mViewType,
              inputType: "text",
              hint: "输入内容",
              lines: 5,
              name: "value",
              inputText: _have_cache ? form.action : void 0,
              form: form,
              enable: _have_cache ? false : true,
              type: "_option",
              hasFooterDivider: "true"
            });
            return root.mButton(list_data);
          };
          break;
        default:
          mViewType = "ListViewCellLine";
          mProcessFun = function(list_data, form, mViewType) {
            var i, j, len, option, ref, results;
            ref = form.content.split("\r\n");
            results = [];
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
              option = ref[i];
              results.push(list_data.push({
                viewType: mViewType,
                _rightLayoutSize: 0,
                _leftLayoutSize: 40,
                _bottomDivider: _cfg.divider_config,
                leftImage: {
                  imageType: "assets",
                  imageSize: "fitSize",
                  imageSrc: (form.action != null) && parseInt(form.action) === i ? _cfg.checked_image_url : _cfg.unchecked_image_url
                },
                centerTitle: option,
                form: form,
                value: i,
                type: "_option",
                hasFooterDivider: "true"
              }));
            }
            return results;
          };
      }
      mProcessFun(list_data, form, mViewType);
      return "_false";
    };

    ECpageClass.prototype.isDone = function() {
      var i, j, len, ref, results;
      ref = _res.items;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        $A().app().log(typeof i.action);
        if (typeof i.action === "undefined") {
          _have_cache = false;
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ECpageClass.prototype.saveToCache = function(item, value) {
      if (_local_answers == null) {
        _local_answers = {};
      }
      _local_answers[item.form.id] = value;
      $A().lrucache().set({
        key: _info.fav_id_id,
        value: JSON.stringify(_local_answers)
      });
      return root.showSurvey_setAnswerToRes();
    };

    ECpageClass.prototype.updateState = function(action_type, action, kf_course_user_fav_id, course_index_id) {
      var update_all, update_item;
      $A().lrucache().set({
        key: kf_course_user_fav_id + "_" + course_index_id,
        value: action
      });
      update_all = [];
      update_item = {
        action: action,
        action_type: action_type,
        kf_course_user_fav_id: kf_course_user_fav_id,
        course_index_id: course_index_id
      };
      return $A().app().netState().then(function(net_state) {
        return $A().lrucache().get("update_all").then(function(data) {
          if ((data != null) && data !== "") {
            update_all = JSON.parse(data);
          }
          update_all.push(update_item);
          if (net_state === "offline") {
            return $A().lrucache().set({
              key: "update_all",
              value: update_all
            });
          } else {
            return $A().app().callApi({
              method: "users/courses/course_indices/massaction",
              actions: update_all,
              cacheTime: 0
            }).then(function(res) {
              if ((res.success != null) && res.success === true) {
                return $A().lrucache().remove("update_all");
              } else {
                return $A().lrucache().set({
                  key: "update_all",
                  value: update_all
                });
              }
            });
          }
        });
      });
    };

    ECpageClass.prototype.mShowAnswer = function(list_data, form, sign) {
      if (sign === true) {
        if ((form.action != null) && _now_index === form.number) {
          list_data.push({
            viewType: "ListViewCellArticle",
            content: form.answer,
            type: "_answer",
            _backgroundColor: {
              _clickable: false,
              pressed: "#f2f2f2",
              selected: "#f2f2f2",
              normal: "#f2f2f2"
            }
          });
        }
      }
      return "_false";
    };

    return ECpageClass;

  })();

  new ECpageClass("page_course_survey");

}).call(this);
